//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/packets/VehicleControlPacket.msg.
//

#ifndef __VEHICLECONTROLPACKET_M_H
#define __VEHICLECONTROLPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class VehicleControlPacket;
class VehicleStartPacket;
class VehicleStatusPacket;
class VehicleInstructionPacket;
class VehiclePlatoonInfoPacket;
class LowLevelPacket;
#include "nodes/mec/MECPlatform/MECPackets_m.h" // import nodes.mec.MECPlatform.MECPackets

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:4</tt> by opp_msgtool.
 * <pre>
 * class VehicleControlPacket extends MECPacket
 * {
 *     simtime_t creationTime;
 *     int sequenceNumber;
 * }
 * </pre>
 */
class VehicleControlPacket : public ::MECPacket
{
  protected:
    omnetpp::simtime_t creationTime = SIMTIME_ZERO;
    int sequenceNumber = 0;

  private:
    void copy(const VehicleControlPacket& other);

  protected:
    bool operator==(const VehicleControlPacket&) = delete;

  public:
    VehicleControlPacket();
    VehicleControlPacket(const VehicleControlPacket& other);
    virtual ~VehicleControlPacket();
    VehicleControlPacket& operator=(const VehicleControlPacket& other);
    virtual VehicleControlPacket *dup() const override {return new VehicleControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(omnetpp::simtime_t creationTime);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:9</tt> by opp_msgtool.
 * <pre>
 * class VehicleStartPacket extends VehicleControlPacket
 * {
 *     double vehicleLength;
 *     string carId;
 *     string sumoCarId;
 *     double position_x;
 *     double position_y;
 *     double position_z;
 *     double acceleration;
 *     double speed;
 *     double distance;
 *     string frontVehicle;
 * }
 * </pre>
 */
class VehicleStartPacket : public ::VehicleControlPacket
{
  protected:
    double vehicleLength = 0;
    omnetpp::opp_string carId;
    omnetpp::opp_string sumoCarId;
    double position_x = 0;
    double position_y = 0;
    double position_z = 0;
    double acceleration = 0;
    double desiredAcceleration = 0;
    double speed = 0;
    double distance = 0;
    omnetpp::opp_string frontVehicle;

  private:
    void copy(const VehicleStartPacket& other);

  protected:
    bool operator==(const VehicleStartPacket&) = delete;

  public:
    VehicleStartPacket();
    VehicleStartPacket(const VehicleStartPacket& other);
    virtual ~VehicleStartPacket();
    VehicleStartPacket& operator=(const VehicleStartPacket& other);
    virtual VehicleStartPacket *dup() const override {return new VehicleStartPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getVehicleLength() const;
    virtual void setVehicleLength(double vehicleLength);

    virtual const char * getCarId() const;
    virtual void setCarId(const char * carId);

    virtual const char * getSumoCarId() const;
    virtual void setSumoCarId(const char * sumoCarId);

    virtual double getPosition_x() const;
    virtual void setPosition_x(double position_x);

    virtual double getPosition_y() const;
    virtual void setPosition_y(double position_y);

    virtual double getPosition_z() const;
    virtual void setPosition_z(double position_z);

    virtual double getAcceleration() const;
    virtual void setAcceleration(double acceleration);

    virtual double getDesiredAcceleration() const;
    virtual void setDesiredAcceleration(double acceleration);

    virtual double getSpeed() const;
    virtual void setSpeed(double speed);

    virtual double getDistance() const;
    virtual void setDistance(double distance);

    virtual const char * getFrontVehicle() const;
    virtual void setFrontVehicle(const char * frontVehicle);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleStartPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleStartPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:22</tt> by opp_msgtool.
 * <pre>
 * class VehicleStatusPacket extends VehicleControlPacket
 * {
 *     //unsigned int carId;
 *     double position_x;
 *     double position_y;
 *     double position_z;
 *     double acceleration;
 *     double speed;
 *     double distance;
 *     string frontVehicle;
 *     double desiredAcceleration;
 * }
 * </pre>
 */
class VehicleStatusPacket : public ::VehicleControlPacket
{
  protected:
    double position_x = 0;
    double position_y = 0;
    double position_z = 0;
    double acceleration = 0;
    double speed = 0;
    double distance = 0;
    omnetpp::opp_string frontVehicle;
    double desiredAcceleration = 0;

  private:
    void copy(const VehicleStatusPacket& other);

  protected:
    bool operator==(const VehicleStatusPacket&) = delete;

  public:
    VehicleStatusPacket();
    VehicleStatusPacket(const VehicleStatusPacket& other);
    virtual ~VehicleStatusPacket();
    VehicleStatusPacket& operator=(const VehicleStatusPacket& other);
    virtual VehicleStatusPacket *dup() const override {return new VehicleStatusPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getPosition_x() const;
    virtual void setPosition_x(double position_x);

    virtual double getPosition_y() const;
    virtual void setPosition_y(double position_y);

    virtual double getPosition_z() const;
    virtual void setPosition_z(double position_z);

    virtual double getAcceleration() const;
    virtual void setAcceleration(double acceleration);

    virtual double getSpeed() const;
    virtual void setSpeed(double speed);

    virtual double getDistance() const;
    virtual void setDistance(double distance);

    virtual const char * getFrontVehicle() const;
    virtual void setFrontVehicle(const char * frontVehicle);

    virtual double getDesiredAcceleration() const;
    virtual void setDesiredAcceleration(double desiredAcceleration);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleStatusPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleStatusPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:35</tt> by opp_msgtool.
 * <pre>
 * class VehicleInstructionPacket extends VehicleControlPacket
 * {
 *     bool isLeader;
 *     double acceleration;
 *     double thisAoi;
 *     double precedingAoi;
 *     double leaderAoi;
 *     string triggeringCarId;
 * }
 * </pre>
 */
class VehicleInstructionPacket : public ::VehicleControlPacket
{
  protected:
    bool isLeader_ = false;
    double acceleration = 0;
    double thisAoi = 0;
    double precedingAoi = 0;
    double leaderAoi = 0;
    omnetpp::opp_string triggeringCarId;

  private:
    void copy(const VehicleInstructionPacket& other);

  protected:
    bool operator==(const VehicleInstructionPacket&) = delete;

  public:
    VehicleInstructionPacket();
    VehicleInstructionPacket(const VehicleInstructionPacket& other);
    virtual ~VehicleInstructionPacket();
    VehicleInstructionPacket& operator=(const VehicleInstructionPacket& other);
    virtual VehicleInstructionPacket *dup() const override {return new VehicleInstructionPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool isLeader() const;
    virtual void setIsLeader(bool isLeader);

    virtual double getAcceleration() const;
    virtual void setAcceleration(double acceleration);

    virtual double getThisAoi() const;
    virtual void setThisAoi(double thisAoi);

    virtual double getPrecedingAoi() const;
    virtual void setPrecedingAoi(double precedingAoi);

    virtual double getLeaderAoi() const;
    virtual void setLeaderAoi(double leaderAoi);

    virtual const char * getTriggeringCarId() const;
    virtual void setTriggeringCarId(const char * triggeringCarId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleInstructionPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleInstructionPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:44</tt> by opp_msgtool.
 * <pre>
 * class VehiclePlatoonInfoPacket extends VehicleControlPacket
 * {
 *     string platoonId;
 *     string platoonCarId;
 * }
 * </pre>
 */
class VehiclePlatoonInfoPacket : public ::VehicleControlPacket
{
  protected:
    omnetpp::opp_string platoonId;
    omnetpp::opp_string platoonCarId;

  private:
    void copy(const VehiclePlatoonInfoPacket& other);

  protected:
    bool operator==(const VehiclePlatoonInfoPacket&) = delete;

  public:
    VehiclePlatoonInfoPacket();
    VehiclePlatoonInfoPacket(const VehiclePlatoonInfoPacket& other);
    virtual ~VehiclePlatoonInfoPacket();
    VehiclePlatoonInfoPacket& operator=(const VehiclePlatoonInfoPacket& other);
    virtual VehiclePlatoonInfoPacket *dup() const override {return new VehiclePlatoonInfoPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getPlatoonId() const;
    virtual void setPlatoonId(const char * platoonId);

    virtual const char * getPlatoonCarId() const;
    virtual void setPlatoonCarId(const char * platoonCarId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehiclePlatoonInfoPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehiclePlatoonInfoPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/packets/VehicleControlPacket.msg:49</tt> by opp_msgtool.
 * <pre>
 * class LowLevelPacket extends inet::ApplicationPacket
 * {
 *     unsigned int carId;
 *     double position_x;
 *     double position_y;
 *     double position_z;
 *     double acceleration;
 *     double speed;
 *     double distance;
 *     string frontVehicle;
 * }
 * </pre>
 */
class LowLevelPacket : public ::inet::ApplicationPacket
{
  protected:
    unsigned int carId = 0;
    double position_x = 0;
    double position_y = 0;
    double position_z = 0;
    double acceleration = 0;
    double speed = 0;
    double distance = 0;
    omnetpp::opp_string frontVehicle;

  private:
    void copy(const LowLevelPacket& other);

  protected:
    bool operator==(const LowLevelPacket&) = delete;

  public:
    LowLevelPacket();
    LowLevelPacket(const LowLevelPacket& other);
    virtual ~LowLevelPacket();
    LowLevelPacket& operator=(const LowLevelPacket& other);
    virtual LowLevelPacket *dup() const override {return new LowLevelPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getCarId() const;
    virtual void setCarId(unsigned int carId);

    virtual double getPosition_x() const;
    virtual void setPosition_x(double position_x);

    virtual double getPosition_y() const;
    virtual void setPosition_y(double position_y);

    virtual double getPosition_z() const;
    virtual void setPosition_z(double position_z);

    virtual double getAcceleration() const;
    virtual void setAcceleration(double acceleration);

    virtual double getSpeed() const;
    virtual void setSpeed(double speed);

    virtual double getDistance() const;
    virtual void setDistance(double distance);

    virtual const char * getFrontVehicle() const;
    virtual void setFrontVehicle(const char * frontVehicle);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LowLevelPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LowLevelPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline VehicleControlPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleControlPacket*>(ptr.get<cObject>()); }
template<> inline VehicleStartPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleStartPacket*>(ptr.get<cObject>()); }
template<> inline VehicleStatusPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleStatusPacket*>(ptr.get<cObject>()); }
template<> inline VehicleInstructionPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleInstructionPacket*>(ptr.get<cObject>()); }
template<> inline VehiclePlatoonInfoPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehiclePlatoonInfoPacket*>(ptr.get<cObject>()); }
template<> inline LowLevelPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<LowLevelPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEHICLECONTROLPACKET_M_H

